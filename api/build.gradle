plugins {
	id 'java'
	id 'org.springframework.boot' version '2.5.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.graalvm.buildtools.native' version '0.9.20'

	id 'org.sonarqube' version '4.0.0.2929'
	id 'jacoco'
}

group = 'edu.upc.essi.dtim.odin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

configurations.all {
	exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
	/////////////////////////////////////// springframework DEPENDENCIES ///////////////////////////////////////
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	/////////////////////////////////////// projectlombok DEPENDENCIES ///////////////////////////////////////
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	/////////////////////////////////////// ORM DEPENDENCIES ///////////////////////////////////////
	// https://mvnrepository.com/artifact/org.hibernate.orm/hibernate-core
	implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: '6.0.0.Final'

	// https://mvnrepository.com/artifact/org.hibernate.javax.persistence/hibernate-jpa-2.1-api
	implementation 'org.eclipse.persistence:javax.persistence:2.0.0'

	// https://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.jpa
	implementation group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.jpa', version: '2.5.0'

	// https://mvnrepository.com/artifact/com.h2database/h2
	runtimeOnly group: 'com.h2database', name: 'h2', version: '2.1.214'

	// https://mvnrepository.com/artifact/io.delta/delta-spark
	// https://mvnrepository.com/artifact/io.delta/delta-core_2.13/2.3.0
	implementation group: 'io.delta', name: 'delta-core_2.13', version: '2.3.0'
	////////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////// JENA DEPENDENCIES ///////////////////////////////////////
	// https://mvnrepository.com/artifact/org.apache.jena/apache-jena-libs
	// https://mvnrepository.com/artifact/org.apache.jena/apache-jena-libs/4.1.0
	implementation group: 'org.apache.jena', name: 'apache-jena-libs', version: '4.1.0', ext: 'pom'

	// https://mvnrepository.com/artifact/org.apache.jena/jena-querybuilder
	// https://mvnrepository.com/artifact/org.apache.jena/jena-querybuilder/4.1.0
	implementation group: 'org.apache.jena', name: 'jena-querybuilder', version: '4.1.0'
	////////////////////////////////////////////////////////////////////////////////////////////////


	////////////////////////////////////////// NextiaCore //////////////////////////////////////////
	implementation fileTree(dir: 'lib', include: ['NextiaCore.jar'])
	runtimeOnly(fileTree(dir: 'lib', include: ['NextiaCore.jar']))
	////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////// NextiaDataLayer //////////////////////////////////////////
	implementation fileTree(dir: 'lib', include: ['NextiaDL.jar'])
	runtimeOnly(fileTree(dir: 'lib', include: ['NextiaDL.jar']))
	////////////////////////////////////////////////////////////////////////////////////////////////


	////////////////////////////////////////// NextiaDI //////////////////////////////////////////
	implementation fileTree(dir: 'lib', include: ['NextiaDI.jar'])
	runtimeOnly(fileTree(dir: 'lib', include: ['NextiaDI.jar']))

	//implementation 'edu.upc.essi.dtim:nextiadi:0.1.0-SNAPSHOT'

	////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////// NextiaGraphy //////////////////////////////////////////
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	// https://mvnrepository.com/artifact/com.google.code.gson/gson/2.8.9
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
	////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////// OLD BOOTSTRAPPING LIB //////////////////////////////////////////
	implementation fileTree(dir: 'lib', include: ['NextiaBS.jar'])
	runtimeOnly(fileTree(dir: 'lib', include: ['NextiaBS.jar']))
	//////////////////////////////////////////////////////////////////////////////////////////////////////////

	implementation fileTree(dir: 'lib', include: ['NextiaJD.jar'])
	runtimeOnly(fileTree(dir: 'lib', include: ['NextiaJD.jar']))

	//implementation fileTree(dir: 'lib', include: ['*.jar'])
}


tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	dependsOn test
}

task generateDocs(type: Javadoc) {
	source = sourceSets.main.allJava
	destinationDir = file("${buildDir}/docs")
	options.links("https://docs.oracle.com/javase/8/docs/api/")
	failOnError false
}

sonarqube {
	properties {
		property "sonar.projectKey", "dtim-upc_newODIN"
		property "sonar.organization", "dtim"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.core.codeCoveragePlugin', 'jacoco'
		property "sonar.exclusions", "/src/main/java/edu/upc/essi/dtim/odin/NextiaGraphy/**"
	}
}
tasks['sonarqube'].dependsOn test


task buildNextiaCore(type: GradleBuild) {
	buildFile = '..\\..\\NextiaCore\\build.gradle'
	tasks = ['build']
}

task buildNextiaDataLayer(type: GradleBuild) {
	buildFile = '..\\..\\NextiaDataLayer\\build.gradle'
	tasks = ['build']
}

task buildNextiaJD(type: GradleBuild) {
	buildFile = '..\\..\\NextiaJD2\\build.gradle'
	tasks = ['build']
}

task buildNextiaBS(type: GradleBuild) {
	buildFile = '..\\..\\NextiaBS\\build.gradle'
	tasks = ['build']
}

task buildNextiaDI(type: GradleBuild) {
	buildFile = '..\\..\\NextiaDI\\build.gradle'
	tasks = ['build']
}

// Dependency relationships
buildNextiaDI.dependsOn buildNextiaCore
buildNextiaBS.dependsOn buildNextiaCore
buildNextiaJD.dependsOn buildNextiaCore, buildNextiaDataLayer
buildNextiaDataLayer.dependsOn buildNextiaCore

task generateAndImportExternalJar {
	dependsOn tasks.named('buildNextiaCore'),
			tasks.named('buildNextiaDataLayer'),
			tasks.named('buildNextiaJD'),
			tasks.named('buildNextiaDI'),
			tasks.named('buildNextiaBS')
}
plugins {
	id 'java'
	id 'org.springframework.boot' version '2.5.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.graalvm.buildtools.native' version '0.9.20'

	id 'org.sonarqube' version '4.0.0.2929'
	id 'jacoco'
}

group = 'edu.upc.essi.dtim.odin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
	/*flatDir {
		dirs 'C:\\Users\\victo\\Documents\\GitHub\\NextiaCore\\build\\libs'
	}*/
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	/////////////////////////////////////// ORM DEPENDENCIES ///////////////////////////////////////
	// https://mvnrepository.com/artifact/org.hibernate.orm/hibernate-core
	implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: '6.0.0.Final'

	// https://mvnrepository.com/artifact/org.hibernate.javax.persistence/hibernate-jpa-2.1-api
	implementation 'org.eclipse.persistence:javax.persistence:2.0.0'

	// https://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.jpa
	implementation group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.jpa', version: '2.5.0'

	// https://mvnrepository.com/artifact/com.h2database/h2
	runtimeOnly group: 'com.h2database', name: 'h2', version: '2.1.214'

	// https://mvnrepository.com/artifact/io.delta/delta-spark
	implementation group: 'io.delta', name: 'delta-core_2.13', version: '2.3.0'
	////////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////// JENA DEPENDENCIES ///////////////////////////////////////
	implementation group: 'org.apache.jena', name: 'apache-jena-libs', version: '4.1.0', ext: 'pom'
	implementation group: 'org.apache.jena', name: 'jena-querybuilder', version: '4.1.0'
	////////////////////////////////////////////////////////////////////////////////////////////////


	////////////////////////////////////////// NextiaCore //////////////////////////////////////////
	implementation fileTree(dir: 'lib', include: ['NextiaCore.jar'])
	runtimeOnly(fileTree(dir: 'lib', include: ['NextiaCore.jar']))
	////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////// NextiaDataLayer //////////////////////////////////////////
	implementation fileTree(dir: 'lib', include: ['NextiaDataLayer.jar'])
	runtimeOnly(fileTree(dir: 'lib', include: ['NextiaDataLayer.jar']))
	////////////////////////////////////////////////////////////////////////////////////////////////


	////////////////////////////////////////// NextiaDI //////////////////////////////////////////
	implementation fileTree(dir: 'lib', include: ['NextiaDI.jar'])
	runtimeOnly(fileTree(dir: 'lib', include: ['NextiaDI.jar']))

	//implementation 'edu.upc.essi.dtim:nextiadi:0.1.0-SNAPSHOT'

	////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////// NextiaGraphy //////////////////////////////////////////
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
	////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////// OLD BOOTSTRAPPING LIB //////////////////////////////////////////
	implementation fileTree(dir: 'lib', include: ['NextiaBS-1.0-SNAPSHOT-uber.jar'])
	runtimeOnly(fileTree(dir: 'lib', include: ['NextiaBS-1.0-SNAPSHOT-uber.jar']))
	implementation fileTree(dir: 'lib', include: ['NextiaBS.jar'])
	runtimeOnly(fileTree(dir: 'lib', include: ['NextiaBS.jar']))
	//////////////////////////////////////////////////////////////////////////////////////////////////////////

	implementation fileTree(dir: 'lib', include: ['NextiaJD.jar'])
	runtimeOnly(fileTree(dir: 'lib', include: ['NextiaJD.jar']))

	//implementation fileTree(dir: 'lib', include: ['*.jar'])

}


tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	dependsOn test
}

task generateDocs(type: Javadoc) {
	source = sourceSets.main.allJava
	destinationDir = file("${buildDir}/docs")
	options.links("https://docs.oracle.com/javase/8/docs/api/")
	failOnError false
}

sonarqube {
	properties {
		property "sonar.projectKey", "dtim-upc_newODIN"
		property "sonar.organization", "dtim"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.core.codeCoveragePlugin', 'jacoco'
		property "sonar.exclusions", "/src/main/java/edu/upc/essi/dtim/odin/NextiaGraphy/**"
	}
}
tasks['sonarqube'].dependsOn test


//para copiar la versión actualizada de NextiaCore y NextiaDI (tener dependencias en misma carpeta que ODIN)
//por ejemplo carpeta Folder y dentro de Folder tener ODIN, NextiaCore, NextiaBS, etc.
def nextiaCoreJarPath = "..\\..\\NextiaCore\\build\\libs"
def nextiaDIJarPath = "..\\..\\NextiaDI\\source\\build\\libs"
def nextiaBSJarPath = "..\\..\\NextiaBS\\build\\libs"
def nextiaDLJarPath = "..\\..\\NextiaDataLayer\\build\\libs"
def nextiaJDJarPath = "..\\..\\NextiaJD2\\build\\libs"

task importExternalJar {
	doLast {
		def nextiaCorePath = project(':NextiaCore')
		def nextiaDIPath = project(':NextiaDI')
		def nextiaBSPath = project(':NextiaBS')
		def nextiaDLPath = project(':NextiaDataLayer')
		def nextiaJDPath = project(':NextiaJD')

		// Verifica si los archivos JAR existen en las rutas especificadas
		def nextiaCoreJar = file(nextiaCoreJarPath)
		def nextiaDIJar = file(nextiaDIJarPath)
		def nextiaBSJar = file(nextiaBSJarPath)
		def nextiaDLJar = file(nextiaDLJarPath)
		def nextiaJDJar = file(nextiaJDJarPath)


		if (!nextiaCoreJar.exists()) {
			nextiaCorePath.tasks.uberJar.dependsOn {
				println "Ejecutando uberJar para NextiaCore..."
			}
			nextiaCorePath.tasks.uberJar.execute()
			nextiaCorePath.tasks.uberJar.get()

			if (!nextiaCoreJar.exists()) {
				throw new GradleException("No se pudo generar el archivo JAR para NextiaCore.")
			}
		}

		if (!nextiaDIJar.exists()) {
			nextiaDIPath.tasks.uberJar.dependsOn {
				println "Ejecutando uberJar para NextiaDI..."
			}
			nextiaDIPath.tasks.uberJar.execute()
			nextiaDIPath.tasks.uberJar.get()

			if (!nextiaDIJar.exists()) {
				throw new GradleException("No se pudo generar el archivo JAR para NextiaDI.")
			}
		}

		if (!nextiaBSJar.exists()) {
			nextiaBSPath.tasks.uberJar.dependsOn {
				println "Ejecutando uberJar para NextiaBS..."
			}
			nextiaBSPath.tasks.uberJar.execute()
			nextiaBSPath.tasks.uberJar.get()

			if (!nextiaBSJar.exists()) {
				throw new GradleException("No se pudo generar el archivo JAR para NextiaBS.")
			}
		}

		if (!nextiaDLJar.exists()) {
			nextiaDLPath.tasks.uberJar.dependsOn {
				println "Ejecutando uberJar para NextiaDL..."
			}
			nextiaDLPath.tasks.uberJar.execute()
			nextiaDLPath.tasks.uberJar.get()

			if (!nextiaDLJar.exists()) {
				throw new GradleException("No se pudo generar el archivo JAR para NextiaDL.")
			}
		}

		if (!nextiaJDJar.exists()) {
			nextiaJDPath.tasks.uberJar.dependsOn {
				println "Ejecutando uberJar para NextiaJD..."
			}
			nextiaJDPath.tasks.uberJar.execute()
			nextiaJDPath.tasks.uberJar.get()

			if (!nextiaJDar.exists()) {
				throw new GradleException("No se pudo generar el archivo JAR para NextiaJD.")
			}
		}

		// Copiar los JAR después de asegurarse de que existen
		copy {
			from nextiaCoreJarPath
			into "../api/lib"
			rename { 'NextiaCore.jar' }
		}

		copy {
			from nextiaDIJarPath
			into "../api/lib"
			rename { 'NextiaDI.jar' }
		}

		copy {
			from nextiaBSJarPath
			into "../api/lib"
			rename { 'NextiaBS.jar' }
		}

		copy {
			from nextiaDLJarPath
			into "../api/lib"
			rename { 'NextiaDataLayer.jar' }
		}

		copy {
			from nextiaJDJarPath
			into "../api/lib"
			rename { 'NextiaJD.jar' }
		}
	}
}
